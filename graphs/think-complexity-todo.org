* TODOS

** Exercise 2.2

*** DONE Download thinkcomplex.com/ GraphCode.py , which contains the code in this chapter.
 Run it as a script and make sure the test code in main does what you expect.
*** DONE Make a copy of GraphCode.py called Graph.py.
 Add the following methods to Graph, adding test code as you go.
*** DONE Write a method named get_edge that takes two vertices and returns the edge between them if it exists and None otherwise.
 Hint: use a try statement.
*** DONE Write a method named remove_edge that takes an edge and removes all references to it from the graph.
*** DONE Write a method named vertices that returns a list of the vertices in a graph.
*** DONE Write a method named edges that returns a list of edges in a graph.
 Note that in our representation of an undirected graph there are two references to each edge.
*** DONE Write a method named out_vertices that takes a Vertex and returns a list of the adjacent vertices (the ones connected to the given node by an edge).
*** DONE Write a method named out_edges that takes a Vertex and returns a list of edges connected to the given Vertex.
*** DONE Write a method named add_all_edges that starts with an edgeless Graph and makes a complete graph by adding edges between all pairs of vertices.

** Exercise 2.4

*** IN-PROGRESS Implement random Graph in Think Complexity
    DEADLINE: <2016-02-06 Sat> SCHEDULED: <2016-02-06 Sat>
    CLOCK: [2016-02-06 Sat 13:40]--[2016-02-06 Sat 14:19] =>  0:39

** Exercise 2.5
   
*** TODO Implement connected Graph in Think Complexity
    SCHEDULED: <2016-02-06 Sat> DEADLINE: <2016-02-13 Sat>
    CLOCK: [2016-02-06 Sat 14:23]
